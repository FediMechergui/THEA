---
# Docker deployment tasks for THEA

- name: Create application directories
  file:
    path: "/opt/thea/{{ item }}"
    state: directory
    mode: '0755'
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
  loop:
    - nodejs_backend
    - fastapi_ocr
    - fastapi_ocr/uploads
    - rag_chatbot
    - rag_chatbot/data

- name: Copy docker-compose.yml
  template:
    src: templates/docker-compose.yml.j2
    dest: /opt/thea/docker-compose.yml
    mode: '0644'
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"

- name: Copy environment files
  template:
    src: "templates/{{ item }}.j2"
    dest: "/opt/thea/{{ item }}"
    mode: '0644'
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
  loop:
    - nodejs_backend/.env.docker
    - fastapi_ocr/.env.docker
    - rag_chatbot/.env.docker

- name: Copy prometheus configuration
  copy:
    src: "{{ playbook_dir }}/../prometheus.yml"
    dest: /opt/thea/prometheus.yml
    mode: '0644'
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
  when: prometheus_metrics_enabled | default(true)

# Networks are created automatically by docker-compose
# - name: Create Docker networks
#   docker_network:
#     name: "{{ item }}"
#     driver: bridge
#     state: present
#   loop:
#     - thea-network
#     - monitoring

- name: Pull Docker infrastructure images
  docker_image:
    name: "{{ item.name }}"
    tag: "{{ item.tag | default('latest') }}"
    source: pull
    state: present
  loop:
    - { name: 'mysql', tag: '8.0-debian' }
    - { name: 'postgres', tag: '13-alpine' }
    - { name: 'redis', tag: 'alpine' }
    - { name: 'rabbitmq', tag: '3-management' }
    - { name: 'minio/minio' }
    - { name: 'chromadb/chroma' }
    - { name: 'ollama/ollama' }
    - { name: 'prom/prometheus' }
    - { name: 'grafana/grafana' }

- name: Pull THEA microservices from local registry
  docker_image:
    name: "{{ item }}"
    source: pull
    state: present
  loop:
    - 'localhost:5000/nodejs_backend_thea-backend:latest'
    - 'localhost:5000/thea_fastapi-ocr:latest'
    - 'localhost:5000/rag_chatbot:latest'
  when: env == "development"

- name: Start Docker services with docker compose
  shell: |
    cd /opt/thea
    docker compose up -d --remove-orphans
  args:
    executable: /bin/bash
  become: yes
  become_user: "{{ ansible_user }}"

- name: Wait for MySQL to be healthy
  docker_container_info:
    name: "thea-mysql-1"
  register: container_info
  until: "container_info.exists and container_info.container.State.Status == 'running'"
  retries: 30
  delay: 10
  ignore_errors: yes

- name: Set up Docker cleanup cron job
  cron:
    name: "Docker cleanup"
    minute: "0"
    hour: "2"
    job: "docker system prune -f && docker volume prune -f"