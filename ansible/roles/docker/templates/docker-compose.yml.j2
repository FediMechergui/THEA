services:
  # Node.js Backend
  nodejs-backend:
    image: localhost:5000/nodejs_backend_thea-backend:latest
    ports:
      - "{{ nodejs_port }}:3000"
    env_file:
      - ./nodejs_backend/.env.docker
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_started
      rabbitmq:
        condition: service_started
      minio:
        condition: service_started
    networks:
      - thea-network
    restart: unless-stopped

  # FastAPI OCR Service
  fastapi-ocr:
    image: localhost:5000/thea_fastapi-ocr:latest
    ports:
      - "{{ ocr_port }}:8000"
    env_file:
      - ./fastapi_ocr/.env.docker
    volumes:
      - ./fastapi_ocr/uploads:/app/uploads
    depends_on:
      - redis
      - minio
    networks:
      - thea-network
    restart: unless-stopped

  fastapi-ocr-worker:
    image: localhost:5000/thea_fastapi-ocr:latest
    command: celery -A app.worker.celery worker --loglevel=debug
    env_file:
      - ./fastapi_ocr/.env.docker
    volumes:
      - ./fastapi_ocr/uploads:/app/uploads
    depends_on:
      - redis
    networks:
      - thea-network
    restart: unless-stopped

  # RAG Chatbot Service
  rag-chatbot:
    image: localhost:5000/rag_chatbot:latest
    ports:
      - "{{ chatbot_port }}:8001"
    env_file:
      - ./rag_chatbot/.env.docker
    volumes:
      - ./rag_chatbot/data:/app/data
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_started
      postgres:
        condition: service_started
      vector_store:
        condition: service_started
      ollama:
        condition: service_started
    networks:
      - thea-network
    restart: unless-stopped

  rag-chatbot-worker:
    image: localhost:5000/rag_chatbot:latest
    command: celery -A app.worker.celery worker --loglevel=debug
    env_file:
      - ./rag_chatbot/.env.docker
    volumes:
      - ./rag_chatbot/data:/app/data
    depends_on:
      - redis
      - postgres
      - vector_store
      - mysql
      - ollama
    networks:
      - thea-network
    restart: unless-stopped

  # Shared Infrastructure Services
  mysql:
    image: mysql:8.0-debian
    environment:
      - MYSQL_ALLOW_EMPTY_PASSWORD=yes
      - MYSQL_DATABASE={{ mysql_database }}
    volumes:
      - mysql_data:/var/lib/mysql
    ports:
      - "{{ mysql_port }}:3306"
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root"]
      timeout: 20s
      retries: 10
    networks:
      - thea-network
    restart: unless-stopped

  redis:
    image: redis:alpine
    ports:
      - "{{ redis_port }}:6379"
    volumes:
      - redis_data:/data
    networks:
      - thea-network
    restart: unless-stopped

  rabbitmq:
    image: rabbitmq:3-management
    ports:
      - "{{ rabbitmq_port }}:5672"
      - "{{ rabbitmq_management_port }}:15672"
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    environment:
      - RABBITMQ_DEFAULT_USER={{ rabbitmq_user }}
      - RABBITMQ_DEFAULT_PASS={{ rabbitmq_password }}
    networks:
      - thea-network
    restart: unless-stopped

  minio:
    image: minio/minio
    ports:
      - "{{ minio_port }}:9000"
      - "{{ minio_console_port }}:9001"
    volumes:
      - minio_data:/data
    environment:
      - MINIO_ROOT_USER={{ minio_root_user }}
      - MINIO_ROOT_PASSWORD={{ minio_root_password }}
    command: server /data --console-address ":9001"
    networks:
      - thea-network
    restart: unless-stopped

  postgres:
    image: postgres:13-alpine
    environment:
      - POSTGRES_USER={{ postgres_user }}
      - POSTGRES_PASSWORD={{ postgres_password }}
      - POSTGRES_DB={{ postgres_database }}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "{{ postgres_port }}:5432"
    networks:
      - thea-network
    restart: unless-stopped

  vector_store:
    image: chromadb/chroma:latest
    ports:
      - "{{ chroma_port }}:8000"
    volumes:
      - vector_store_data:/chroma/data
    networks:
      - thea-network
    restart: unless-stopped

  # Ollama LLM Service
  ollama:
    image: ollama/ollama:latest
    ports:
      - "{{ ollama_port }}:11434"
    volumes:
      - ollama_data:/root/.ollama
    environment:
      - OLLAMA_HOST=0.0.0.0
    networks:
      - thea-network
    restart: unless-stopped

  # Monitoring Services
  prometheus:
    image: prom/prometheus
    ports:
      - "{{ prometheus_port }}:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    networks:
      - thea-network
      - monitoring
    restart: unless-stopped

  grafana:
    image: grafana/grafana
    ports:
      - "{{ grafana_port }}:3000"
    volumes:
      - grafana_data:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_USER={{ grafana_admin_user }}
      - GF_SECURITY_ADMIN_PASSWORD={{ grafana_admin_password }}
    depends_on:
      - prometheus
    networks:
      - thea-network
      - monitoring
    restart: unless-stopped

volumes:
  mysql_data:
  redis_data:
  rabbitmq_data:
  minio_data:
  postgres_data:
  vector_store_data:
  ollama_data:
  prometheus_data:
  grafana_data:

networks:
  thea-network:
    driver: bridge
  monitoring:
    driver: bridge